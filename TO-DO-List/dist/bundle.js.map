{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://to-do-list/./src/index.ts"],"sourcesContent":["interface Todo {\n    text: string;\n    completed: boolean;\n  }\n  \n  class TodoList {\n    private todos: Todo[] = [];\n    private filter: 'all' | 'completed' | 'incomplete' = 'all';\n  \n    constructor() {\n      this.render();\n    }\n  \n    private addTodo(text: string) {\n      const todo: Todo = {\n        text,\n        completed: false\n      };\n      this.todos.push(todo);\n      this.render();\n    }\n  \n    private completeTodo(index: number) {\n      this.todos[index].completed = true;\n      this.render();\n    }\n    \n    private deleteTodo(index: number) {\n        this.todos.splice(index, 1);\n        this.render();\n      }\n\n    private editTodoText(index: number, newText: string) {\n        this.todos[index].text = newText;\n        this.render();\n      }\n\n      private filterTodos() {\n        let filteredTodos: Todo[] = [];\n    \n        if (this.filter === 'completed') {\n          filteredTodos = this.todos.filter(todo => todo.completed);\n          console.log('completed', filteredTodos)\n        } else if (this.filter === 'incomplete') {\n          filteredTodos = this.todos.filter(todo => !todo.completed);\n          console.log('no completed', filteredTodos)\n        } else {\n          filteredTodos = this.todos;\n        }\n    \n        this.render(filteredTodos);\n      }\n    \n      public setFilter(filter: 'all' | 'completed' | 'incomplete') {\n        this.filter = filter;\n        this.filterTodos();\n      }\n\n      private reorderTodos(event: DragEvent) {\n        event.preventDefault();\n        const fromIndex = Number(event.dataTransfer!.getData(\"text/plain\"));\n        const toIndex = Number((event.target as HTMLElement).getAttribute(\"data-index\"));\n      \n        const elementToMove = this.todos[fromIndex];\n        this.todos.splice(fromIndex, 1);\n        this.todos.splice(toIndex, 0, elementToMove);\n      \n        this.render();\n      }\n\n      private render(todos?: Todo[]) {\n        const todoList = document.getElementById(\"todo-list\");\n        if (todoList) {\n          todoList.innerHTML = \"\";\n          this.renderTodoList(todoList, todos);\n          this.renderAddTodoForm(todoList);\n          this.renderFilterButtons(todoList);\n        }\n      }\n      \n      private renderTodoList(todoList: HTMLElement, todos?: Todo[]) {\n        const todosToRender = todos || this.todos;\n        todosToRender.forEach((todo, index) => {\n          const container = document.createElement(\"div\");\n          container.classList.add(\"todo-item-container\");\n          const li = document.createElement(\"li\");\n          li.innerText = todo.text;\n          li.setAttribute(\"draggable\", \"true\");\n          li.setAttribute(\"data-index\", index.toString());\n          li.addEventListener(\"dragstart\", (event) => {\n            event.dataTransfer!.setData(\"text/plain\", index.toString());\n          });\n          li.addEventListener(\"dragover\", (event) => {\n            event.preventDefault();\n          });\n          li.addEventListener(\"drop\", this.reorderTodos.bind(this));\n\n          if (todo.completed) {\n            li.classList.add(\"completed\");\n          } else {\n            li.classList.add(\"incomplete\");\n          }\n      \n          const completeButton = document.createElement(\"button\");\n          completeButton.innerText = \"Complete\";\n          if (todo.completed) {\n            completeButton.style.display = \"none\";\n          } else {\n            completeButton.addEventListener(\"click\", () => {\n              this.completeTodo(index);\n              completeButton.style.display = \"none\";\n            });\n          }\n          li.appendChild(completeButton);\n      \n          const editButton = document.createElement(\"button\");\n          editButton.innerText = \"Edit\";\n          editButton.addEventListener(\"click\", () => {\n            this.renderEditTodoForm(li, todo, index);\n          });\n          li.appendChild(editButton);\n\n          const deleteButton = document.createElement(\"button\");\n          deleteButton.innerText = \"Delete\";\n          deleteButton.addEventListener(\"click\", () => {\n            this.deleteTodo(index);\n          });\n          li.appendChild(deleteButton);\n      \n          container.appendChild(li);\n          todoList.appendChild(container);\n        });\n      }\n      \n      private renderEditTodoForm(li: HTMLLIElement, todo: Todo, index: number) {\n        const editInput = document.createElement(\"input\");\n        editInput.type = \"text\";\n        editInput.value = todo.text;\n        editInput.addEventListener(\"keydown\", (event) => {\n            if(event.key === \"Enter\"){\n                const newText = editInput.value.trim();\n                if(newText){\n                    this.editTodoText(index, newText);\n                }\n            }\n        })\n        li.replaceChild(editInput, li.firstChild);\n        editInput.select();\n      }\n      \n      private renderAddTodoForm(todoList: HTMLElement) {\n        const form = document.createElement(\"form\");\n        const input = document.createElement(\"input\");\n        const addButton = document.createElement(\"button\");\n      \n        input.placeholder = \"Add a new to-do item\";\n        addButton.innerText = \"Add\";\n        addButton.addEventListener(\"click\", (event) => {\n          event.preventDefault();\n          const inputValue = input.value.trim();\n          if (inputValue) {\n            this.addTodo(inputValue);\n            input.value = \"\";\n          }\n        });\n      \n        form.appendChild(input);\n        form.appendChild(addButton);\n        todoList.appendChild(form);\n      }      \n\n      private renderFilterButtons(todoList: HTMLElement) {\n        const filterButtons = document.createElement(\"div\");\n        const allButton = document.createElement(\"button\");\n        allButton.innerText = \"All\";\n        allButton.addEventListener(\"click\", () => {\n          this.setFilter(\"all\");\n        });\n        filterButtons.appendChild(allButton);\n\n        const completedButton = document.createElement(\"button\");\n        completedButton.innerText = \"Completed\";\n        completedButton.addEventListener(\"click\", () => {\n          this.setFilter(\"completed\");\n        });\n        filterButtons.appendChild(completedButton);\n    \n        const incompleteButton = document.createElement(\"button\");\n        incompleteButton.innerText = \"Incomplete\";\n        incompleteButton.addEventListener(\"click\", () => {\n          this.setFilter(\"incomplete\");\n        });\n        filterButtons.appendChild(incompleteButton);\n    \n        todoList.appendChild(filterButtons);\n      }\n\n\n  }\n  \n  const todoList = new TodoList();\n  "],"names":["constructor","todos","filter","this","render","addTodo","text","todo","completed","push","completeTodo","index","deleteTodo","splice","editTodoText","newText","filterTodos","filteredTodos","console","log","setFilter","reorderTodos","event","preventDefault","fromIndex","Number","dataTransfer","getData","toIndex","target","getAttribute","elementToMove","todoList","document","getElementById","innerHTML","renderTodoList","renderAddTodoForm","renderFilterButtons","forEach","container","createElement","classList","add","li","innerText","setAttribute","toString","addEventListener","setData","bind","completeButton","style","display","appendChild","editButton","renderEditTodoForm","deleteButton","editInput","type","value","key","trim","replaceChild","firstChild","select","form","input","addButton","placeholder","inputValue","filterButtons","allButton","completedButton","incompleteButton"],"sourceRoot":""}