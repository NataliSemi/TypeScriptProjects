{"version":3,"file":"bundle.js","mappings":"MAsHA,MAAMA,EAAQ,IA1Gd,MAUEC,YAAYC,GACVC,KAAKC,UAAYF,EAAQG,UAtBC,KAuB1BF,KAAKG,WAAaJ,EAAQK,WAtBE,IAuB5BJ,KAAKK,UAAYL,KAAKC,UACtBD,KAAKM,SAAW,KAChBN,KAAKO,UAAY,KACjBP,KAAKQ,gBAAkB,OACvBR,KAAKS,sBAAwB,EAC7BT,KAAKU,sBAAwB,CAC/B,CAEAC,MAAMC,GACJZ,KAAKO,UAAYK,GAAY,KAC7BZ,KAAKK,UAAYL,KAAKC,UACtBD,KAAKa,OACLb,KAAKM,SAAWQ,aAAY,KAC1Bd,KAAKa,MAAM,GACV,IACL,CAEAE,QACMf,KAAKM,WACPU,cAAchB,KAAKM,UACnBN,KAAKM,SAAW,KAEpB,CAEAW,QACEjB,KAAKe,QACLf,KAAKK,UAAYL,KAAKC,UACtBD,KAAKQ,gBAAkB,OACvBR,KAAKS,sBAAwB,EAC7BT,KAAKU,sBAAwB,EAC7BV,KAAKkB,cACLlB,KAAKmB,YACP,CAEQN,OACNb,KAAKK,YACkB,IAAnBL,KAAKK,YACPL,KAAKe,QACDf,KAAKO,WACPP,KAAKO,YAEqB,SAAzBP,KAAKQ,iBACNR,KAAKK,UAAYL,KAAKG,WACtBH,KAAKQ,gBAAkB,QACvBR,KAAKoB,yBACLpB,KAAKS,0BAELT,KAAKK,UAAYL,KAAKC,UACtBD,KAAKQ,gBAAkB,OACvBR,KAAKoB,yBACLpB,KAAKU,yBAEPV,KAAKkB,cACFlB,KAAKS,sBAAwBT,KAAKU,wBA3EZ,EA4EvBV,KAAKiB,QAELjB,KAAKW,SAGTX,KAAKmB,YACP,CAGQD,cACN,MAAMG,EAAUC,SAASC,cAAc,gBACpCF,IACDA,EAAQG,UAAqC,SAAzBxB,KAAKQ,gBAA6B,OAAS,QAEnE,CAEQW,aACN,MAAMM,EAAaH,SAASC,cAAc,cACpCG,EAAmBJ,SAASC,cAAc,oBAChD,GAAGE,GAAcC,EAAiB,CAChC,MAAMC,EAAUC,KAAKC,MAAM7B,KAAKK,UAAY,IACtCyB,EAAU9B,KAAKK,UAAY,GAC3B0B,EAAU,GAAGJ,EAAQK,WAAWC,SAAS,EAAG,QAAQH,EAAQE,WAAWC,SAAS,EAAG,OACzFR,EAAWD,UAAYO,EAEvB,MAAMG,EAAwBlC,KAAKS,sBAAsBuB,WAAWC,SAAS,EAAG,KAC1EE,EAAyBnC,KAAKU,sBAAsBsB,WAAWC,SAAS,EAAG,KACjFP,EAAiBF,UAAY,GAAGU,KAAyBC,G,CAE7D,CAEQf,yBACN,MAAMgB,EAAUd,SAASC,cAAc,UACvCa,EAAQC,YAAc,EACtBD,EAAQE,MACV,GAI8B,CAC9BpC,SAAU,KACVE,UAAW,MAGPmC,EAAWjB,SAASC,cAAc,cAClCiB,EAAWlB,SAASC,cAAc,cAClCkB,EAAWnB,SAASC,cAAc,cAExCgB,SAAAA,EAAUG,iBAAiB,SAAS,KAClC7C,EAAMc,OAAO,IAGf6B,SAAAA,EAAUE,iBAAiB,SAAS,KAClC7C,EAAMkB,OAAO,IAGf0B,SAAAA,EAAUC,iBAAiB,SAAS,KAClC7C,EAAMoB,OAAO,G","sources":["webpack://pomodoro-timer-/./src/index.ts"],"sourcesContent":["// Define constants for time intervals\nconst WORK_INTERVAL: number = 25 * 60; // 25 minutes in seconds\nconst BREAK_INTERVAL: number  = 5 * 60; // 5 minutes in seconds\nconst SESSION_LENGTH: number = 4;\n\n// Define interface for the timer options\ninterface TimerOptions {\n  workTime: number;\n  breakTime: number;\n}\n\n// Define class for the timer\nclass PomodoroTimer {\n  private _workTime: number;\n  private _breakTime: number;\n  private _interval: number;\n  private _timerId: NodeJS.Timeout | null;\n  private _callback: Function | null;\n  private _currentSession: 'work' | 'break';\n  private _workSessionCompleted: number;\n  private _breakSessionComplted: number;\n\n  constructor(options: TimerOptions) {\n    this._workTime = options.workTime || WORK_INTERVAL;\n    this._breakTime = options.breakTime || BREAK_INTERVAL;\n    this._interval = this._workTime;\n    this._timerId = null;\n    this._callback = null;\n    this._currentSession = 'work';\n    this._workSessionCompleted = 0;\n    this._breakSessionComplted = 0;\n  }\n\n  start(callback?: Function): void {\n    this._callback = callback || null;\n    this._interval = this._workTime;\n    this.tick();\n    this._timerId = setInterval(() => {\n      this.tick();\n    }, 1000);\n  }\n\n  pause(): void {\n    if (this._timerId) {\n      clearInterval(this._timerId);\n      this._timerId = null;\n    }\n  }\n\n  reset(): void {\n    this.pause();\n    this._interval = this._workTime;\n    this._currentSession = 'work';\n    this._workSessionCompleted = 0;\n    this._breakSessionComplted = 0;\n    this.updateLabel();\n    this.updateTime();\n  }\n\n  private tick(): void {\n    this._interval--;\n    if (this._interval === 0) {\n      this.pause();\n      if (this._callback) {\n        this._callback();\n      }\n      if(this._currentSession === 'work'){\n        this._interval = this._breakTime;\n        this._currentSession = 'break';\n        this._playNotificationSound(); // play notification sound when break interval ends\n        this._workSessionCompleted++;\n      }else{\n        this._interval = this._workTime;\n        this._currentSession = 'work';\n        this._playNotificationSound(); // play notification sound when break interval ends\n        this._breakSessionComplted++;\n      }\n      this.updateLabel();\n      if(this._workSessionCompleted + this._breakSessionComplted === SESSION_LENGTH){\n        this.reset();\n      }else{\n        this.start();\n      }\n    }\n    this.updateTime();\n  }\n\n\n  private updateLabel(): void{\n    const labelEl = document.querySelector('#timer-label');\n    if(labelEl){\n      labelEl.innerHTML = this._currentSession === 'work' ? 'Work' : 'Break';\n    }\n  }\n\n  private updateTime(): void{\n    const timeLeftEl = document.querySelector('#time-left');\n    const sessionCounterEl = document.querySelector('#session-counter')\n    if(timeLeftEl && sessionCounterEl){\n      const minutes = Math.floor(this._interval / 60);\n      const seconds = this._interval % 60;\n      const timeStr = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n      timeLeftEl.innerHTML = timeStr;\n\n      const workSessionsCompleted = this._workSessionCompleted.toString().padStart(2, '0');\n      const breakSessionsCompleted = this._breakSessionComplted.toString().padStart(2, '0');\n      sessionCounterEl.innerHTML = `${workSessionsCompleted}/${breakSessionsCompleted}`;\n    }\n  }\n\n  private _playNotificationSound(): void {\n    const audioEl = document.querySelector('#audio') as HTMLAudioElement;\n    audioEl.currentTime = 0;\n    audioEl.play();\n  }\n}\n\n// Usage example\nconst timer = new PomodoroTimer({\n  workTime: 25 * 60, // 25 minutes in seconds\n  breakTime: 5 * 60, // 5 minutes in seconds\n});\n\nconst startBtn = document.querySelector('#start-btn');\nconst pauseBtn = document.querySelector('#pause-btn');\nconst resetBtn = document.querySelector('#reset-btn');\n\nstartBtn?.addEventListener('click', () => {\n  timer.start();\n});\n\npauseBtn?.addEventListener('click', () => {\n  timer.pause();\n});\n\nresetBtn?.addEventListener('click', () => {\n  timer.reset();\n});"],"names":["timer","constructor","options","this","_workTime","workTime","_breakTime","breakTime","_interval","_timerId","_callback","_currentSession","_workSessionCompleted","_breakSessionComplted","start","callback","tick","setInterval","pause","clearInterval","reset","updateLabel","updateTime","_playNotificationSound","labelEl","document","querySelector","innerHTML","timeLeftEl","sessionCounterEl","minutes","Math","floor","seconds","timeStr","toString","padStart","workSessionsCompleted","breakSessionsCompleted","audioEl","currentTime","play","startBtn","pauseBtn","resetBtn","addEventListener"],"sourceRoot":""}